import readline from 'readline';
import { ChildProcessByStdio, exec, spawn } from 'child_process';
import { clearScreen, showBanner } from './utils.js';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';
import fs from 'fs'

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});


const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

let isRecording = false;
let arecord: ChildProcessByStdio<null, null, null>

export function mainMenu() {
  clearScreen();
  showBanner();

  if (!isRecording) {
    console.log('1. üéô –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å');
    console.log('0. ‚ùå –í—ã—Ö–æ–¥');
    rl.question('\n–í—ã–±–æ—Ä: ', (answer) => {
      if (answer === '1') {
        startRecording();
      } else {
        rl.close();
      }
    });
  } else {
    console.log('Enter ‚èé ‚Äî –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å');
    console.log('0. ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å\n');
    rl.question('', (input) => {
      console.log('–ù–ê–ñ–ê–¢ ENTER');
      
      if (input === '0') {
        isRecording = false;
        mainMenu();
      } else {
        stopRecording();
      }
    });
  }
}

function startRecording() {
  console.log('üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å...');
  isRecording = true;
  const scriptPath = resolve(__dirname, './scripts/start-record.sh');
  arecord = spawn('arecord', ['-f', 'cd', '-c', '1', '-r', '16000', resolve(__dirname, './input.wav')], {
    detached: true,
    stdio: ['ignore', 'ignore', 'ignore']  // ‚Üê —ç—Ç–æ –∫–ª—é—á
  });
  fs.writeFileSync(resolve(__dirname, './scripts/arecord.pid'), (arecord.pid || 0).toString());
  exec(`bash ${scriptPath}`, () => {
    mainMenu();
  });
}

function stopRecording() {
  console.log('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...');
  if(arecord) {
    arecord.kill()
    fs.rmSync(resolve(__dirname, './scripts/arecord.pid'))
  }
  isRecording = false;
  const scriptPath = resolve(__dirname, './scripts/stop-record.sh');
  
  exec(`bash ${scriptPath}`, async (err, stdout: string) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏:', err);
    } else {
      if (!stdout) {
        console.log('–ù–∏—á–µ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–µ –±—ã–ª–æ. stdout –ø—É—Å—Ç! ->', stdout ?? 'undefined')
        return void 0;
      }
      console.log('[DEBUG]:: stdout', stdout);
      
      await startVoiceOver(stdout)
      console.log(`‚úÖ –û–∑–≤—É—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–¢–≤–æ–π —Ç–µ–∫—Å—Ç: ${stdout}`);

    }
    setTimeout(mainMenu, 10500);
  });
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–∑–≤—É—á–∫—É –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
 */
async function startVoiceOver(text: string): Promise<undefined> {
  return new Promise((res, rej) => {
    exec(`bash voice-over "${text}"`, (err, stdout: string) => {
      if(err) {
        console.log('ERROR', err);
        return void process.exit(1)
      }
      console.log('–ö–û–ù–ï–¶ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø', stdout);
      
      // fs.rmSync(resolve(__dirname, './input.wav'))
      res(void 0)
    })
  })
}